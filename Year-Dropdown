import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd

df_cases = pd.read_csv("C:\\Users\\yasmi\\OneDrive\\Desktop\\eigenesProjekt_Covid_Dashboard\\owid-covid-data.csv")
df_years = pd.read_csv("C:\\Users\\yasmi\\OneDrive\\Desktop\\eigenesProjekt_Covid_Dashboard\\calendar_data.csv")
result_cases = pd.read_csv("C:\\Users\\yasmi\\OneDrive\\Desktop\\eigenesProjekt_Covid_Dashboard\\result_cases.csv")
result_deaths_dir = "C:\\Users\\yasmi\\OneDrive\\Desktop\\eigenesProjekt_Covid_Dashboard\\result_deaths.csv"
result_cases_dir = "C:\\Users\\yasmi\\OneDrive\\Desktop\\eigenesProjekt_Covid_Dashboard\\result_cases.csv"

# Daten zusammenführen
df = pd.merge(df_years, df_cases, on='date')

# Aggregation nach Datum (Summe der new_cases pro Datum)
df_aggregated_cases = df.groupby('date')['new_cases'].sum().reset_index()

# Aggregation nach Datum (Summe der new_cases pro Datum)
df_aggregated_deaths = df.groupby('date')['new_deaths'].sum().reset_index()

# Dash App erstellen
app = dash.Dash(__name__)

# Dropdown-Menü mit Jahren erstellen
year_options = [{'label': 'All Years', 'value': 'all'}]
year_options += [{'label': str(year), 'value': year} for year in result_cases['Year'].unique()]


# Erstelle eine Dash-App und definiere das Layout mit HTML-Elementen und Dash-Komponenten
app.layout = html.Div([
    # HTML-Überschrift (H1) für das gesamte Dashboard
    html.H1("COVID-19 Dashboard - New Cases and Deaths per Date and Year"),
    # Div-Container für das Dropdown-Menü, um das Auswahljahr zu ändern
    html.Div(
        style={'margin': '10px'},  # Styling-Optionen für den äußeren Div-Container
        children=[
            # Innerer Div-Container mit einem Rahmen, Innenabstand und Hintergrundfarbe für das Dropdown-Menü
            html.Div(
                style={'border': '1px solid black', 'padding': '10px', 'background-color': 'lightgray'},
                children=[
                    # Überschrift für das Dropdown-Menü
                    html.H3("Select Year"),
                    dcc.Dropdown(
                        # ID für das Dropdown-Menü
                        id='year-dropdown',
                        # Optionen für Jahre
                        options=year_options,
                        # Standardwert auf 'all' setzen
                        value='all',
                        # Erlaube nur eine Auswahl
                        multi=False,
                        # Breite des Dropdown-Menüs auf 100% des Containers setzen
                        style={'width': '100%'}
                    ),
                ]
            ),
        ]
    ),

    # Div-Container für die Charts der neuen Fälle
    html.Div(
        children=[
            # Innerer Div-Container mit einem Rahmen und Hintergrundfarbe für die Charts der neuen Fälle
            html.Div(
                style={'border': '1px solid black', 'margin': '10px', 'background-color': 'white'},
                children=[
                    # Überschrift für die Charts der neuen Fälle
                    html.H3("New Corona Cases"),
                    html.Div([
                        # Erstelle einen Balken-Chart für neue Fälle mit bestimmten Eigenschaften
                        dcc.Graph(id='new-cases-bar-chart', style={'width': '50%', 'height': '400px'},
                                    # Deaktiviere die Plotly-Toolbar
                                  config={'displayModeBar': False},
                                  figure={
                                    # Setze transparenten Hintergrund
                                      'layout': {'plot_bgcolor': 'rgba(0,0,0,0)', 'paper_bgcolor': 'rgba(0,0,0,0)'}}),
                        # Erstelle einen Liniendiagramm für neue Fälle mit bestimmten Eigenschaften
                        dcc.Graph(id='new-cases-line-plot', style={'width': '50%', 'height': '400px'},
                                    # Deaktiviere die Plotly-Toolbar
                                  config={'displayModeBar': False},
                                  figure={
                                        # Setze transparenten Hintergrund
                                      'layout': {'plot_bgcolor': 'rgba(0,0,0,0)', 'paper_bgcolor': 'rgba(0,0,0,0)'}}),
                    # Zeige die Charts nebeneinander an
                    ], style={'display': 'flex'}),
                ]
            ),
        ]
    ),

    # Div-Container für die Charts der neuen Todesfälle
    html.Div(
        children=[
            # Innerer Div-Container mit einem Rahmen und Hintergrundfarbe für die Charts der neuen Todesfälle
            html.Div(
                style={'border': '1px solid black', 'margin': '10px', 'background-color': 'white'},
                children=[
                    # Überschrift für die Charts der neuen Todesfälle
                    html.H3("New Corona Deaths"),
                    html.Div([
                        # Erstelle einen Balken-Chart für neue Todesfälle mit bestimmten Eigenschaften
                        dcc.Graph(id='new-deaths-bar-chart', style={'width': '50%', 'height': '400px'},
                                  config={'displayModeBar': False},  # Deaktiviere die Plotly-Toolbar
                                  figure={
                                        # Setze transparenten Hintergrund
                                      'layout': {'plot_bgcolor': 'rgba(0,0,0,0)', 'paper_bgcolor': 'rgba(0,0,0,0)'}}),
                        # Erstelle einen Liniendiagramm für neue Todesfälle mit bestimmten Eigenschaften
                        dcc.Graph(id='new-deaths-line-plot', style={'width': '50%', 'height': '400px'},
                                # Deaktiviere die Plotly-Toolbar
                                  config={'displayModeBar': False},
                                  figure={
                                        # Setze transparenten Hintergrund
                                      'layout': {'plot_bgcolor': 'rgba(0,0,0,0)', 'paper_bgcolor': 'rgba(0,0,0,0)'}}),
                    # Zeige die Charts nebeneinander an
                    ], style={'display': 'flex'}),
                ]
            ),
        ]
    ),
])


# Callback-Funktion für den Bar-Chart der neuen Fälle basierend auf der ausgewählten Jahreszahl
@app.callback(
    Output(component_id='new-cases-bar-chart', component_property='figure'),
    Input(component_id='year-dropdown', component_property='value')
)
def update_new_cases_bar_chart(selected_year):
    # Annahme: Deine Datei heißt data.csv und befindet sich im gleichen Verzeichnis
    global result_cases_dir
    # Lese die Daten aus der CSV-Datei in ein Pandas DataFrame ein
    data = pd.read_csv(result_cases_dir)
    # Erstelle den Bar-Chart mit Plotly Express
    fig_new_yearly_cases_bar_chart = px.bar(data, x='Year', y='new_cases',
                                            title='New Cases Compared to the Previous Year')
    fig_new_yearly_cases_bar_chart.update_layout(xaxis_title='Year', yaxis_title='New Cases')
    # Festlege der gewünschten Werte für die x-Achse (Jahreszahlen)
    desired_years = [2020, 2021, 2022, 2023]
    fig_new_yearly_cases_bar_chart.update_xaxes(tickvals=desired_years)
    return fig_new_yearly_cases_bar_chart



# Callback-Funktion für den Line-Plot der neuen Fälle basierend auf der ausgewählten Jahreszahl
@app.callback(
    Output('new-cases-line-plot', 'figure'),
    [Input('year-dropdown', 'value')]
)
def update_new_cases_line_plot(selected_year):
    if selected_year == 'all':
        df_filtered_cases = df_aggregated_cases
    else:
        df_filtered_cases = df[df['Year'] == selected_year]

    fig_cases_line = px.line(df_filtered_cases, x='date', y='new_cases', title='New Cases Over Time')
    fig_cases_line.update_layout(xaxis_title='Date', yaxis_title='New Cases', title='New Cases Over Time')

    return fig_cases_line


# Callback-Funktion für den Bar-Chart der neuen Todesfälle basierend auf der ausgewählten Jahreszahl
@app.callback(
    Output('new-deaths-bar-chart', 'figure'),
    [Input('year-dropdown', 'value')]
)
def update_new_deaths_bar_chart(selected_year):
    # Annahme: Deine Datei heißt data.csv und befindet sich im gleichen Verzeichnis
    global result_deaths_dir

    # Lese die Daten aus der CSV-Datei in ein Pandas DataFrame ein
    data = pd.read_csv(result_deaths_dir)

    # Erstelle den Bar-Chart mit Plotly Express
    fig_new_yearly_deaths_bar_chart = px.bar(data, x='Year', y='new_deaths',
                                             title='New Deaths Compared to the Previous Year')

    fig_new_yearly_deaths_bar_chart.update_layout(xaxis_title='Year', yaxis_title='New Deaths')

    # Festlegen der gewünschten Werte für die x-Achse (Jahreszahlen)
    desired_years = [2020, 2021, 2022, 2023]
    fig_new_yearly_deaths_bar_chart.update_xaxes(tickvals=desired_years)

    return fig_new_yearly_deaths_bar_chart



# Callback-Funktion für den Line-Plot der neuen Todesfälle basierend auf der ausgewählten Jahreszahl
@app.callback(
    Output('new-deaths-line-plot', 'figure'),
    [Input('year-dropdown', 'value')]
)
def update_new_deaths_line_plot(selected_year):
    if selected_year == 'all':
        df_filtered_deaths = df_aggregated_deaths
    else:
        df_filtered_deaths = df[df['Year'] == selected_year]

    fig_deaths_line = px.line(df_filtered_deaths, x='date', y='new_deaths', title='New Deaths Over Time')
    fig_deaths_line.update_layout(xaxis_title='Date', yaxis_title='New Deaths', title='New Deaths Over Time')

    return fig_deaths_line


# Fehlerbehandlung für die Dash-Anwendung
@app.server.errorhandler(Exception)
def handle_exceptions(error):
    # Gibt die Fehlermeldung auf der Konsole aus.
    print(f"Fehler behandelt: {error}")
    # Zeigt eine allgemeine Fehlermeldung für den Benutzer an.
    return "Ein Fehler ist aufgetreten."

# Starte die Dash-Anwendung
if __name__ == '__main__':
    app.run_server(debug=True, port=8060)
